# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative 'type_base'

module Azure::ARM
    #
    # Model object.
    #
    # noinspection RubyResolve,RubyResolve
    class ARMResourceBase < TypeBase

      # @return a reference to the template this resource belongs to
      def template
        self.parent
      end

      # @return [String] Name of the resource
      attr_accessor :name

      # @return [String] Resource type
      attr_accessor :type

      # @return [String] API Version of the resource type
      attr_accessor :api_version

      # @return [ResourceCopy] a copy descriptor
      attr_accessor :copy

      attr_accessor :depends_on


      # Create a new resource instance and link it to a template
      def initialize(parent, init)
        super(parent)
        if init.is_a? String or init.is_a? Azure::ARM::Expression
          # We'll assume that it's the resource name.
          @name = init
        end
        if init.is_a? Hash
          @name = init[:name] if init.has_key? :name
          @type = init[:type] if init.has_key? :type
          @api_version = init[:api_version] if init.has_key? :api_version
        end
        @depends_on = []
        if parent.is_a? ARMResourceBase
          add_dependency(parent)
        end
        @order = -1
      end

      def set_copy(copy)
        if copy.is_a? String
          copy = Azure::ARM::ResourceCopy.new self,
                                              name: concat(self.name, "-cpy"),
                                              count: template.add_parameter(copy, type: "int")
        end
        if copy.is_a? Integer
          copy = Azure::ARM::ResourceCopy.new self,
                                              name: concat(self.name, "-cpy"),
                                              count: copy
        end
        if copy.is_a? Azure::ARM::Expression
          copy = Azure::ARM::ResourceCopy.new self,
                                              name: concat(self.name, "-cpy"),
                                              count: copy
        end
        if copy.is_a? Azure::ARM::ResourceCopy
          self.copy = copy
          self.name = concat(self.name, copyIndex())
        end
      end

      def get_name_template
        'rsrc'
      end

      def get_name
        normalize_name @name
      end

      def get_name_expression
        name = normalize_name @name
        name.to_s
      end

      def containing_resource
        self
      end

      # Add a dependency to the resource
      # @return [ARMResourceBase] the dependency
      def add_dependency(dep)
        if dep.is_a? String
          id = dep
        else
          id = dep.to_rsrcid.to_s
        end
        ids = self.to_rsrcid.to_s
        @depends_on.push dep unless id == ids or @depends_on.find { |d| id == d.to_rsrcid.to_s}
        dep
      end

      # Define a sort order
      def sort_order
        return @order if @order > -1

        @order = 0

        if @depends_on
          @depends_on.each do |d|
            dord = d.sort_order
            @order = (dord+1) if dord >= @order
          end
        end

        @order
      end


      def to_ref
        concat(@type, get_name)
      end

      def to_rsrcid
        resourceId(@type, get_name)
      end

      def finalize
        return if @finalized
        self.prepare
        @depends_on.each { |d| if d.respond_to? :finalize then d.finalize end }
        @finalized = true
        if @depends_on.length == 0
          @depends_on = nil
        end
      end

      def prepare
        # Empty on purpose. Override this for derived classes that need processing
        # prior to being deployed. For example, some resources may need to set up
        # default dependencies that were not explicitly configured.
        # make up a name if necessary
      end

      #
      # Validate the object. Throws ArgumentError if validation fails.
      #
      def validate
        fail ArgumentError, 'property type is nil' if self.type.nil?
        fail ArgumentError, 'property api_version is nil' if self.api_version.nil?
        fail ArgumentError, 'property name is nil' if self.name.nil?
        @depends_on.each{ |e| e.validate if e.respond_to?(:validate) } unless @depends_on.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        object.validate

        serialized_property = object.name
        output_object[:name] = serialized_property unless serialized_property.nil?

        serialized_property = object.type
        output_object[:type] = serialized_property unless serialized_property.nil?

        serialized_property = object.api_version
        output_object[:apiVersion] = serialized_property unless serialized_property.nil?

        serialized_property = object.depends_on
        output_object[:dependsOn] = serialized_property.map { |dp| if dp.respond_to? :to_rsrcid then dp.to_rsrcid else dp.to_s end } unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        super.serialize_object(hash,self)
        ARMResourceBase.serialize_object(hash, self)
        hash
      end
    end
end

