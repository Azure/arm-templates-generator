# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../../arm/expression'
require_relative '../../arm/models/type_base'

module Azure::ARM

    #
    # Input parameter definitions
    #
    # noinspection RubyResolve
    class Parameter < Azure::ARM::TypeBase
      # @return [String] Type of input parameter
      attr_accessor :type

      # @return [String] Default value to be used if one is not provided
      attr_accessor :default_value

      # @return Metadata for the parameter, can be any valid JSON object
      attr_accessor :metadata

      # @return [Integer] Minimum value for the int type parameter
      attr_accessor :min_value

      # @return [Integer] Maximum value for the int type parameter
      attr_accessor :max_value

      # @return [Integer] Minimum length for the string or array type parameter
      attr_accessor :min_length

      # @return [Integer] Maximum length for the string or array type parameter
      attr_accessor :max_length

      #
      # Validate the object. Throws ArgumentError if validation fails.
      #
      def validate
        fail ArgumentError, 'property type is nil' if @type.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        object.validate

        serialized_property = object.type
        output_object[:type] = serialized_property unless serialized_property.nil?

        serialized_property = object.default_value
        output_object[:defaultValue] = serialized_property unless serialized_property.nil?

        serialized_property = object.metadata
        output_object[:metadata] = serialized_property unless serialized_property.nil?

        serialized_property = object.min_value
        output_object[:minValue] = serialized_property unless serialized_property.nil?

        serialized_property = object.max_value
        output_object[:maxValue] = serialized_property unless serialized_property.nil?

        serialized_property = object.min_length
        output_object[:minLength] = serialized_property unless serialized_property.nil?

        serialized_property = object.max_length
        output_object[:maxLength] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        Parameter.serialize_object(hash,self)
        hash
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [Parameter] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?

        deserialized_property = object[:type]
        output_object.type = deserialized_property

        deserialized_property = object[:defaultValue]
        output_object.default_value = deserialized_property

        deserialized_property = object[:metadata]
        output_object.metadata = deserialized_property

        deserialized_property = object[:minValue]
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.min_value = deserialized_property

        deserialized_property = object[:maxValue]
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.max_value = deserialized_property

        deserialized_property = object[:minLength]
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.min_length = deserialized_property

        deserialized_property = object[:maxLength]
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.max_length = deserialized_property

        output_object
      end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          Parameter.deserialize_object(self, init)
        end
      end
    end

end
