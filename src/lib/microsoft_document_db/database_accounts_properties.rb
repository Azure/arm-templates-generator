# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::DocumentDB
    #
    # Model object.
    #
    class DatabaseAccountsProperties < Azure::ARM::TypeBase

      # @return Microsoft.DocumentDB/databaseAccounts: Name of the database
      # account.
      attr_accessor :name

      # @return Microsoft.DocumentDB/databaseAccounts: Database account offer
      # type
      attr_accessor :database_account_offer_type

      # @return Microsoft.DocumentDB/databaseAccounts: Consistency policy
      attr_accessor :consistency_policy

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.name
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:name] = serialized_property unless serialized_property.nil?

        serialized_property = object.database_account_offer_type
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:databaseAccountOfferType] = serialized_property unless serialized_property.nil?

        serialized_property = object.consistency_policy
        if serialized_property.is_a? ConsistencyOther
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? ConsistencyBoundedStaleness
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:consistencyPolicy] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        DatabaseAccountsProperties.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :database_account_offer_type
        result.push :consistency_policy
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [DatabaseAccountsProperties] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:name)
          conf.name object[:name]
          object.delete :name
        end

        if object.key?(:database_account_offer_type)
          conf.database_account_offer_type object[:database_account_offer_type]
          object.delete :database_account_offer_type
        end

        if object.key?(:consistency_policy)
          conf.consistency_policy object[:consistency_policy]
          object.delete :consistency_policy
        end

        output_object
      end

      def get_name_template
        'dap'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          DatabaseAccountsProperties.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param name
        #        String
        #        Expression
        def name(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.name = props
            return
          end
          if @parent.name.nil? and props.is_a? Azure::ARM::Expression
            @parent.name = props
          end
          @parent.name
        end
        # @param database_account_offer_type
        #        A string, one of 'Standard'
        #        Expression
        def database_account_offer_type(props)
          if props.is_a? String
            fail ArgumentError, "#{props} is an invalid value for @parent.database_account_offer_type" unless ['Standard'].index(props)
            @parent.database_account_offer_type = props
            return
          end
          if @parent.database_account_offer_type.nil? and props.is_a? Azure::ARM::Expression
            @parent.database_account_offer_type = props
          end
          @parent.database_account_offer_type
        end
        # @param consistency_policy
        #        ConsistencyOther
        #        ConsistencyBoundedStaleness
        #        Expression
        def consistency_policy(props)
          if @parent.consistency_policy.nil? and props.is_a? ConsistencyOther
            @parent.consistency_policy = props
            @parent.consistency_policy.parent = @parent
            @parent.consistency_policy._rsrcpath = 'consistencyPolicy'
          end
          if @parent.consistency_policy.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, ConsistencyOther)
            @parent.consistency_policy = ConsistencyOther.new(@parent, props)
            @parent.consistency_policy._rsrcpath = 'consistencyPolicy'
          end
          if @parent.consistency_policy.nil? and props.is_a? ConsistencyBoundedStaleness
            @parent.consistency_policy = props
            @parent.consistency_policy.parent = @parent
            @parent.consistency_policy._rsrcpath = 'consistencyPolicy'
          end
          if @parent.consistency_policy.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, ConsistencyBoundedStaleness)
            @parent.consistency_policy = ConsistencyBoundedStaleness.new(@parent, props)
            @parent.consistency_policy._rsrcpath = 'consistencyPolicy'
          end
          if @parent.consistency_policy.nil? and props.is_a? Azure::ARM::Expression
            @parent.consistency_policy = props
          end
          @parent.consistency_policy
        end
        def create(init=nil,&block)
          @parent = DatabaseAccountsProperties.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
