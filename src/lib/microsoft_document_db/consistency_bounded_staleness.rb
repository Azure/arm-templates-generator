# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::DocumentDB
    #
    # Model object.
    #
    class ConsistencyBoundedStaleness < Azure::ARM::TypeBase

      # @return
      attr_accessor :default_consistency_level

      # @return
      attr_accessor :max_staleness_prefix

      # @return
      attr_accessor :max_interval_in_seconds

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        fail ArgumentError, 'property default_consistency_level is nil' if @default_consistency_level.nil?
        fail ArgumentError, 'property max_staleness_prefix is nil' if @max_staleness_prefix.nil?
        fail ArgumentError, 'property max_interval_in_seconds is nil' if @max_interval_in_seconds.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.default_consistency_level
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:defaultConsistencyLevel] = serialized_property unless serialized_property.nil?

        serialized_property = object.max_staleness_prefix
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:maxStalenessPrefix] = serialized_property unless serialized_property.nil?

        serialized_property = object.max_interval_in_seconds
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:maxIntervalInSeconds] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        ConsistencyBoundedStaleness.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :default_consistency_level
        result.push :max_staleness_prefix
        result.push :max_interval_in_seconds
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [ConsistencyBoundedStaleness] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:default_consistency_level)
          conf.default_consistency_level object[:default_consistency_level]
          object.delete :default_consistency_level
        end

        if object.key?(:max_staleness_prefix)
          conf.max_staleness_prefix object[:max_staleness_prefix]
          object.delete :max_staleness_prefix
        end

        if object.key?(:max_interval_in_seconds)
          conf.max_interval_in_seconds object[:max_interval_in_seconds]
          object.delete :max_interval_in_seconds
        end

        output_object
      end

      def get_name_template
        'cbs'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          ConsistencyBoundedStaleness.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param default_consistency_level
        #        A string, one of 'BoundedStaleness'
        #        Expression
        def default_consistency_level(props)
          if props.is_a? String
            fail ArgumentError, "#{props} is an invalid value for @parent.default_consistency_level" unless ['BoundedStaleness'].index(props)
            @parent.default_consistency_level = props
            return
          end
          if @parent.default_consistency_level.nil? and props.is_a? Azure::ARM::Expression
            @parent.default_consistency_level = props
          end
          @parent.default_consistency_level
        end
        # @param max_staleness_prefix
        #        Fixnum
        #        Expression
        def max_staleness_prefix(props)
          if props.is_a? Fixnum or props.is_a? Azure::ARM::Expression
            @parent.max_staleness_prefix = props
            return
          end
          if @parent.max_staleness_prefix.nil? and props.is_a? Azure::ARM::Expression
            @parent.max_staleness_prefix = props
          end
          @parent.max_staleness_prefix
        end
        # @param max_interval_in_seconds
        #        Fixnum
        #        Expression
        def max_interval_in_seconds(props)
          if props.is_a? Fixnum or props.is_a? Azure::ARM::Expression
            @parent.max_interval_in_seconds = props
            return
          end
          if @parent.max_interval_in_seconds.nil? and props.is_a? Azure::ARM::Expression
            @parent.max_interval_in_seconds = props
          end
          @parent.max_interval_in_seconds
        end
        def create(init=nil,&block)
          @parent = ConsistencyBoundedStaleness.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
