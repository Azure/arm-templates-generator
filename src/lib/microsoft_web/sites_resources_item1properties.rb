# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Web
    #
    # Model object.
    #
    class SitesResourcesItem1Properties < Azure::ARM::TypeBase

      # @return [String] Microsoft.Web/sites/extensions: uri of package
      attr_accessor :package_uri

      # @return [String] Microsoft.Web/sites/extensions: type of database
      attr_accessor :db_type

      # @return [String] Microsoft.Web/sites/extensions: connection string
      attr_accessor :connection_string

      # @return [String] Microsoft.Web/sites/extensions: parameters
      attr_accessor :set_parameters

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        # Nothing to validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.package_uri
        output_object[:packageUri] = serialized_property unless serialized_property.nil?

        serialized_property = object.db_type
        output_object[:dbType] = serialized_property unless serialized_property.nil?

        serialized_property = object.connection_string
        output_object[:connectionString] = serialized_property unless serialized_property.nil?

        serialized_property = object.set_parameters
        output_object[:setParameters] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        SitesResourcesItem1Properties.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :package_uri
        result.push :db_type
        result.push :connection_string
        result.push :set_parameters
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [SitesResourcesItem1Properties] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:package_uri)
          conf.package_uri object[:package_uri]
          object.delete :package_uri
        end

        if object.key?(:db_type)
          conf.db_type object[:db_type]
          object.delete :db_type
        end

        if object.key?(:connection_string)
          conf.connection_string object[:connection_string]
          object.delete :connection_string
        end

        if object.key?(:set_parameters)
          conf.set_parameters object[:set_parameters]
          object.delete :set_parameters
        end

        output_object
      end

      def get_name_template
        'srip'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          SitesResourcesItem1Properties.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param package_uri
        #        String
        def package_uri(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.package_uri = props
            return
          end
          @parent.package_uri
        end
        # @param db_type
        #        String
        def db_type(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.db_type = props
            return
          end
          @parent.db_type
        end
        # @param connection_string
        #        String
        def connection_string(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.connection_string = props
            return
          end
          @parent.connection_string
        end
        # @param set_parameters
        #        String
        def set_parameters(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.set_parameters = props
            return
          end
          @parent.set_parameters
        end
        def create(init=nil,&block)
          @parent = SitesResourcesItem1Properties.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
