# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Web
    #
    # Microsoft.Web/sites
    #
    class Site < Azure::ARM::ResourceBase

      # @return [SitesProperties]
      attr_accessor :properties

      # @return Microsoft.Web/sites: Child resources to define configuration
      # and extensions.
      attr_writer :resources
      def resources(name=nil)
        if name and @resources and @resources.is_a? Array          
          return @resources.find { | p | p.name == name } if name.is_a? String
          return @resources[name] if name.is_a? Integer
        end
        @resources
      end

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        fail ArgumentError, 'property type is nil' if self.type.nil?
        fail ArgumentError, 'property api_version is nil' if self.api_version.nil?
        fail ArgumentError, 'property properties is nil' if self.properties.nil?
        @properties.validate unless @properties.nil?
        @resources.each{ |e| e.validate if e.respond_to?(:validate) } unless @resources.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::ResourceBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.properties
        unless serialized_property.nil?
          serialized_property = serialized_property.to_h
        end
        output_object[:properties] = serialized_property unless serialized_property.nil?

        serialized_property = object.resources
        unless serialized_property.nil?
          serializedarray = []
          serialized_property.each do |element|
            if element.is_a? SitesResourcesItem0
              unless element.nil?
                element = element.to_h
              end
            end
            if element.is_a? SitesResourcesItem1
              unless element.nil?
                element = element.to_h
              end
            end
            serializedarray.push(element)
          end
          serialized_property = serializedarray
        end
        output_object[:resources] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        self.validate
        hash = {}
        Site.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new
        result.push :properties
        result.push :resources
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [Site] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        object.delete :name
        object.delete :type
        object.delete :api_version
        object.delete :location
        object.delete :tags
        object.delete :copy
        object.delete :comments
        conf = Configurator.new output_object.template
        conf.parent = output_object

        if object.key?(:properties)
          conf.properties object[:properties]
        end

        if object.key?(:resources)
          conf.resources object[:resources]
          object.delete :resources
        end

        unless object.key?(:properties)
          conf.properties object
        end

        output_object
      end

      def get_name_template
        's'
      end

      def initialize(parent, init)
        super(parent, init)
        self.type = 'Microsoft.Web/sites' if self.type.nil?
        self.api_version = '2015-08-01' if self.api_version.nil?
        if init.is_a? Hash
          Site.deserialize_object self, init.clone
        end 
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        attr_accessor :template
        # @param properties
        #        SitesProperties
        def properties(props)
          if @parent.properties.nil? and props.is_a? SitesProperties
            @parent.properties = props
            @parent.properties.parent = @parent
            @parent.properties._rsrcpath = 'properties'
          end
          if @parent.properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SitesProperties)
            @parent.properties = SitesProperties.new(@parent, props)
            @parent.properties._rsrcpath = 'properties'
          end
          @parent.properties
        end
        # @param name
        #        String
        def name(props)
          @parent.properties = (SitesProperties.new @parent, nil) if @parent.properties.nil?
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.properties.name = props
            return
          end
          @parent.properties.name
        end
        # @param server_farm_id
        #        String
        def server_farm_id(props)
          @parent.properties = (SitesProperties.new @parent, nil) if @parent.properties.nil?
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.properties.server_farm_id = props
            return
          end
          @parent.properties.server_farm_id
        end
        # @param hostnames
        #        Array<String>
        #        Expression
        def hostnames(props)
          @parent.properties = (SitesProperties.new @parent, nil) if @parent.properties.nil?
          if props.is_a? Array
            @parent.properties.hostnames = Array.new if @parent.properties.hostnames.nil?
            props.each { |p| @parent.properties.hostnames.push _hostnames_string(p) }
            return @parent.properties.hostnames
          end
          _element = nil
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            _element = props
            return
          end
          unless _element.nil?
            @parent.properties.hostnames = Array.new if @parent.properties.hostnames.nil?
            @parent.properties.hostnames.push _element
          end
          if @parent.properties.hostnames.nil? and props.is_a? Azure::ARM::Expression
            @parent.properties.hostnames = props
          end
          @parent.properties.hostnames
        end
        def _hostnames_string(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            return props
          end
        end
        # @param enabled_hostnames
        #        Array<String>
        #        Expression
        def enabled_hostnames(props)
          @parent.properties = (SitesProperties.new @parent, nil) if @parent.properties.nil?
          if props.is_a? Array
            @parent.properties.enabled_hostnames = Array.new if @parent.properties.enabled_hostnames.nil?
            props.each { |p| @parent.properties.enabled_hostnames.push _enabled_hostnames_string(p) }
            return @parent.properties.enabled_hostnames
          end
          _element = nil
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            _element = props
            return
          end
          unless _element.nil?
            @parent.properties.enabled_hostnames = Array.new if @parent.properties.enabled_hostnames.nil?
            @parent.properties.enabled_hostnames.push _element
          end
          if @parent.properties.enabled_hostnames.nil? and props.is_a? Azure::ARM::Expression
            @parent.properties.enabled_hostnames = props
          end
          @parent.properties.enabled_hostnames
        end
        def _enabled_hostnames_string(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            return props
          end
        end
        # @param host_name_ssl_states
        #        Array<SitesPropertiesHostNameSslStates0Item>
        #        Expression
        def host_name_ssl_states(props)
          @parent.properties = (SitesProperties.new @parent, nil) if @parent.properties.nil?
          if props.is_a? Array
            @parent.properties.host_name_ssl_states = Array.new if @parent.properties.host_name_ssl_states.nil?
            props.each { |p| @parent.properties.host_name_ssl_states.push _host_name_ssl_states_sitespropertieshostnamesslstates0item(p) }
            return @parent.properties.host_name_ssl_states
          end
          _element = nil
          if _element.nil? and props.is_a? SitesPropertiesHostNameSslStates0Item
            _element = props
            _element.parent = @parent
            _element._rsrcpath = 'hostNameSslStates'
          end
          if _element.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SitesPropertiesHostNameSslStates0Item)
            _element = SitesPropertiesHostNameSslStates0Item.new(@parent, props)
            _element._rsrcpath = 'hostNameSslStates'
          end
          unless _element.nil?
            @parent.properties.host_name_ssl_states = Array.new if @parent.properties.host_name_ssl_states.nil?
            @parent.properties.host_name_ssl_states.push _element
          end
          if @parent.properties.host_name_ssl_states.nil? and props.is_a? Azure::ARM::Expression
            @parent.properties.host_name_ssl_states = props
          end
          @parent.properties.host_name_ssl_states
        end
        def _host_name_ssl_states_sitespropertieshostnamesslstates0item(props)
          if props.is_a? SitesPropertiesHostNameSslStates0Item
            props.parent = @parent
            props._rsrcpath = 'hostNameSslStates'
            return props
          end
          if (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SitesPropertiesHostNameSslStates0Item)
            _properties = SitesPropertiesHostNameSslStates0Item.new(@parent, props)
            _properties._rsrcpath = 'hostNameSslStates'
            return _properties
          end
        end
        # @param resources
        #        Array<SitesResourcesItem0>
        #        Array<SitesResourcesItem1>
        def resources(props)
          if props.is_a? Array
            @parent.resources = Array.new if @parent.resources.nil?
            props.each { |p| @parent.resources.push _resources_sitesresourcesitem(p) }
            return @parent.resources
          end
          _element = nil
          if _element.nil? and props.is_a? SitesResourcesItem0
            _element = props
            _element.parent = @parent
            _element._rsrcpath = 'resources'
          end
          if _element.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SitesResourcesItem0)
            _element = SitesResourcesItem0.new(@parent, props)
            _element._rsrcpath = 'resources'
          end
          if _element.nil? and props.is_a? SitesResourcesItem1
            _element = props
            _element.parent = @parent
            _element._rsrcpath = 'resources'
          end
          if _element.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SitesResourcesItem1)
            _element = SitesResourcesItem1.new(@parent, props)
            _element._rsrcpath = 'resources'
          end
          if _element.nil?
            _properties = nil
            if _properties.nil? and props.is_a? SitesResourcesItem1Properties
              _properties = props
              _properties.parent = @parent
              _properties._rsrcpath = 'resources'
            end
            if _properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SitesResourcesItem1Properties)
              _properties = SitesResourcesItem1Properties.new(@parent, props)
              _properties._rsrcpath = 'resources'
            end
            unless _properties.nil?
              props[:properties] = _properties
              _element = SitesResourcesItem1.new(@parent, props)
              _element._rsrcpath = 'resources'
              _element.properties = _properties
              _properties.parent = _element
            end
          end
          unless _element.nil?
            @parent.resources = Array.new if @parent.resources.nil?
            @parent.resources.push _element
          end
          @parent.resources
        end
        def _resources_sitesresourcesitem(props)
          if props.is_a? SitesResourcesItem0
            props.parent = @parent
            props._rsrcpath = 'resources'
            return props
          end
          if (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SitesResourcesItem0)
            _properties = SitesResourcesItem0.new(@parent, props)
            _properties._rsrcpath = 'resources'
            return _properties
          end
          if props.is_a? SitesResourcesItem1
            props.parent = @parent
            props._rsrcpath = 'resources'
            return props
          end
          if (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SitesResourcesItem1)
            _properties = SitesResourcesItem1.new(@parent, props)
            _properties._rsrcpath = 'resources'
            return _properties
          end
          _properties = nil
          if _properties.nil? and props.is_a? SitesResourcesItem1Properties
            _properties = props
            _properties.parent = @parent
            _properties._rsrcpath = 'resources'
          end
          if _properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SitesResourcesItem1Properties)
            _properties = SitesResourcesItem1Properties.new(@parent, props)
            _properties._rsrcpath = 'resources'
          end
          unless _properties.nil?
            props[:properties] = _properties
            resources = SitesResourcesItem1.new(@parent, props)
            resources._rsrcpath = 'resources'
            resources.properties = _properties
            _properties.parent = resources
            return resources
          end
        end
        def initialize(template)
          @template = template
        end
        def create(init=nil,&block)
          @parent = Site.new @template,init
          @template.resources.push @parent
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new self.template
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
