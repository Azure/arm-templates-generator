# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::NotificationHubs
    #
    # Model object.
    #
    class NamespacesResourcesItemPropertiesAuthorizationRules0 < Azure::ARM::TypeBase

      # @return [String]
      # Microsoft.NotificationHubs/namespaces/notificationHubs: Authorization
      # Rule Name
      attr_accessor :key_name

      # @return [String]
      # Microsoft.NotificationHubs/namespaces/notificationHubs: Authorization
      # Rule Primary Key Value
      attr_accessor :primary_key

      # @return [String]
      # Microsoft.NotificationHubs/namespaces/notificationHubs:
      # Authorization Rule Secondary Key Value
      attr_accessor :secondary_key

      # @return
      # [namespaces_resourcesItem_properties_authorizationRules_0_rights]
      # Microsoft.NotificationHubs/namespaces/notificationHubs: Authorization
      # Rule Rights. Possible values include: 'Send', 'Manage', 'Listen'
      attr_accessor :rights

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.key_name
        output_object[:keyName] = serialized_property unless serialized_property.nil?

        serialized_property = object.primary_key
        output_object[:primaryKey] = serialized_property unless serialized_property.nil?

        serialized_property = object.secondary_key
        output_object[:secondaryKey] = serialized_property unless serialized_property.nil?

        serialized_property = object.rights
        output_object[:rights] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        NamespacesResourcesItemPropertiesAuthorizationRules0.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :key_name
        result.push :primary_key
        result.push :secondary_key
        result.push :rights
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [NamespacesResourcesItemPropertiesAuthorizationRules0]
      # Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:key_name)
          conf.key_name object[:key_name]
          object.delete :key_name
        end

        if object.key?(:primary_key)
          conf.primary_key object[:primary_key]
          object.delete :primary_key
        end

        if object.key?(:secondary_key)
          conf.secondary_key object[:secondary_key]
          object.delete :secondary_key
        end

        if object.key?(:rights)
          conf.rights object[:rights]
          object.delete :rights
        end

        output_object
      end

      def get_name_template
        'nripar'
        end

      def initialize(parent, init)
        super(parent)
        @rights = 'Listen' if @rights.nil?
        if init.is_a? Hash
          NamespacesResourcesItemPropertiesAuthorizationRules0.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param key_name
        #        String
        def key_name(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.key_name = props
            return
          end
          @parent.key_name
        end
        # @param primary_key
        #        String
        def primary_key(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.primary_key = props
            return
          end
          @parent.primary_key
        end
        # @param secondary_key
        #        String
        def secondary_key(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.secondary_key = props
            return
          end
          @parent.secondary_key
        end
        # @param rights
        #        A string, one of 'Send','Manage','Listen'
        def rights(props)
          if props.is_a? String
            fail ArgumentError, "#{props} is an invalid value for @parent.rights" unless ['Send','Manage','Listen'].index(props)
            @parent.rights = props
            return
          end
          @parent.rights
        end
        def create(init=nil,&block)
          @parent = NamespacesResourcesItemPropertiesAuthorizationRules0.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
