# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Sql
    #
    # Model object.
    #
    class DatabasesBaseAll < Azure::ARM::TypeBase

      # @return Microsoft.Sql/server/databases: Defines that databases is
      # created as a Point-In-Time restoration of another database.
      attr_accessor :create_mode

      # @return [String] Microsoft.Sql/server/databases: The URI of the source
      # database.
      attr_accessor :source_database_id

      # @return [String] Microsoft.Sql/server/databases: The point in time for
      # the restore.
      attr_accessor :restore_point_in_time

      # @return [String] Microsoft.Sql/server/databases: The deletion date
      # time of the source database.
      attr_accessor :source_database_deletion_date

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.create_mode
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:createMode] = serialized_property unless serialized_property.nil?

        serialized_property = object.source_database_id
        output_object[:sourceDatabaseId] = serialized_property unless serialized_property.nil?

        serialized_property = object.restore_point_in_time
        output_object[:restorePointInTime] = serialized_property unless serialized_property.nil?

        serialized_property = object.source_database_deletion_date
        output_object[:sourceDatabaseDeletionDate] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        DatabasesBaseAll.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :create_mode
        result.push :source_database_id
        result.push :restore_point_in_time
        result.push :source_database_deletion_date
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [DatabasesBaseAll] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:create_mode)
          conf.create_mode object[:create_mode]
          object.delete :create_mode
        end

        if object.key?(:source_database_id)
          conf.source_database_id object[:source_database_id]
          object.delete :source_database_id
        end

        if object.key?(:restore_point_in_time)
          conf.restore_point_in_time object[:restore_point_in_time]
          object.delete :restore_point_in_time
        end

        if object.key?(:source_database_deletion_date)
          conf.source_database_deletion_date object[:source_database_deletion_date]
          object.delete :source_database_deletion_date
        end

        output_object
      end

      def get_name_template
        'dba'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          DatabasesBaseAll.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param create_mode
        #        Expression
        #        A string, one of 'Copy','OnlineSecondary','OfflineSecondary','Recovery','PointInTimeRestore','Restore'
        def create_mode(props)
          if @parent.create_mode.nil? and props.is_a? Azure::ARM::Expression
            @parent.create_mode = props
          end
          if props.is_a? String
            fail ArgumentError, "#{props} is an invalid value for @parent.create_mode" unless ['Copy','OnlineSecondary','OfflineSecondary','Recovery','PointInTimeRestore','Restore'].index(props)
            @parent.create_mode = props
            return
          end
          @parent.create_mode
        end
        # @param source_database_id
        #        String
        def source_database_id(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.source_database_id = props
            return
          end
          @parent.source_database_id
        end
        # @param restore_point_in_time
        #        String
        def restore_point_in_time(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.restore_point_in_time = props
            return
          end
          @parent.restore_point_in_time
        end
        # @param source_database_deletion_date
        #        String
        def source_database_deletion_date(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.source_database_deletion_date = props
            return
          end
          @parent.source_database_deletion_date
        end
        def create(init=nil,&block)
          @parent = DatabasesBaseAll.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
