# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Compute
    #
    # Model object.
    #
    class VirtualMachineScaleSetOsProfile < Azure::ARM::TypeBase

      # @return [String]
      attr_accessor :computer_name_prefix

      # @return [String]
      attr_accessor :admin_username

      # @return [String]
      attr_accessor :admin_password

      # @return [String]
      attr_accessor :custom_data

      # @return [WindowsConfiguration]
      attr_accessor :windows_configuration

      # @return [LinuxConfiguration]
      attr_accessor :linux_configuration

      # @return [Array<Secret>]
      attr_writer :secrets
      def secrets(name=nil)
        if name and @secrets and @secrets.is_a? Array
          return @secrets.find { | p | p.name == name } if name.is_a? String
          return @secrets[name] if name.is_a? Integer
        end
        @secrets
      end

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        fail ArgumentError, 'property computer_name_prefix is nil' if @computer_name_prefix.nil?
        @windows_configuration.validate unless @windows_configuration.nil?
        @linux_configuration.validate unless @linux_configuration.nil?
        @secrets.each{ |e| e.validate if e.respond_to?(:validate) } unless @secrets.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.computer_name_prefix
        output_object[:computerNamePrefix] = serialized_property unless serialized_property.nil?

        serialized_property = object.admin_username
        output_object[:adminUsername] = serialized_property unless serialized_property.nil?

        serialized_property = object.admin_password
        output_object[:adminPassword] = serialized_property unless serialized_property.nil?

        serialized_property = object.custom_data
        output_object[:customData] = serialized_property unless serialized_property.nil?

        serialized_property = object.windows_configuration
        unless serialized_property.nil?
          serialized_property = serialized_property.to_h
        end
        output_object[:windowsConfiguration] = serialized_property unless serialized_property.nil?

        serialized_property = object.linux_configuration
        unless serialized_property.nil?
          serialized_property = serialized_property.to_h
        end
        output_object[:linuxConfiguration] = serialized_property unless serialized_property.nil?

        serialized_property = object.secrets
        unless serialized_property.nil?
          serializedarray = []
          serialized_property.each do |element|
            unless element.nil?
              element = element.to_h
            end
            serializedarray.push(element)
          end
          serialized_property = serializedarray
        end
        output_object[:secrets] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        VirtualMachineScaleSetOsProfile.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :computer_name_prefix
        result.push :admin_username
        result.push :admin_password
        result.push :custom_data
        result.push :windows_configuration
        result.push :linux_configuration
        result.push :secrets
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [VirtualMachineScaleSetOsProfile] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:computer_name_prefix)
          conf.computer_name_prefix object[:computer_name_prefix]
          object.delete :computer_name_prefix
        end

        if object.key?(:admin_username)
          conf.admin_username object[:admin_username]
          object.delete :admin_username
        end

        if object.key?(:admin_password)
          conf.admin_password object[:admin_password]
          object.delete :admin_password
        end

        if object.key?(:custom_data)
          conf.custom_data object[:custom_data]
          object.delete :custom_data
        end

        if object.key?(:windows_configuration)
          conf.windows_configuration object[:windows_configuration]
          object.delete :windows_configuration
        end

        if object.key?(:linux_configuration)
          conf.linux_configuration object[:linux_configuration]
          object.delete :linux_configuration
        end

        if object.key?(:secrets)
          conf.secrets object[:secrets]
          object.delete :secrets
        end

        output_object
      end

      def get_name_template
        'vmssop'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          VirtualMachineScaleSetOsProfile.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param computer_name_prefix
        #        String
        def computer_name_prefix(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.computer_name_prefix = props
            return
          end
          @parent.computer_name_prefix
        end
        # @param admin_username
        #        String
        def admin_username(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.admin_username = props
            return
          end
          @parent.admin_username
        end
        # @param admin_password
        #        String
        def admin_password(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.admin_password = props
            return
          end
          @parent.admin_password
        end
        # @param custom_data
        #        String
        def custom_data(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.custom_data = props
            return
          end
          @parent.custom_data
        end
        # @param windows_configuration
        #        WindowsConfiguration
        def windows_configuration(props)
          if @parent.windows_configuration.nil? and props.is_a? WindowsConfiguration
            @parent.windows_configuration = props
            @parent.windows_configuration.parent = @parent
            @parent.windows_configuration._rsrcpath = 'windowsConfiguration'
          end
          if @parent.windows_configuration.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, WindowsConfiguration)
            @parent.windows_configuration = WindowsConfiguration.new(@parent, props)
            @parent.windows_configuration._rsrcpath = 'windowsConfiguration'
          end
          @parent.windows_configuration
        end
        # @param linux_configuration
        #        LinuxConfiguration
        def linux_configuration(props)
          if @parent.linux_configuration.nil? and props.is_a? LinuxConfiguration
            @parent.linux_configuration = props
            @parent.linux_configuration.parent = @parent
            @parent.linux_configuration._rsrcpath = 'linuxConfiguration'
          end
          if @parent.linux_configuration.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, LinuxConfiguration)
            @parent.linux_configuration = LinuxConfiguration.new(@parent, props)
            @parent.linux_configuration._rsrcpath = 'linuxConfiguration'
          end
          @parent.linux_configuration
        end
        # @param secrets
        #        Array<Secret>
        def secrets(props)
          if props.is_a? Array
            @parent.secrets = Array.new if @parent.secrets.nil?
            props.each { |p| @parent.secrets.push _secrets_secret(p) }
            return @parent.secrets
          end
          _element = nil
          if _element.nil? and props.is_a? Secret
            _element = props
            _element.parent = @parent
            _element._rsrcpath = 'secrets'
          end
          if _element.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, Secret)
            _element = Secret.new(@parent, props)
            _element._rsrcpath = 'secrets'
          end
          unless _element.nil?
            @parent.secrets = Array.new if @parent.secrets.nil?
            @parent.secrets.push _element
          end
          @parent.secrets
        end
        def _secrets_secret(props)
          if props.is_a? Secret
            props.parent = @parent
            props._rsrcpath = 'secrets'
            return props
          end
          if (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, Secret)
            _properties = Secret.new(@parent, props)
            _properties._rsrcpath = 'secrets'
            return _properties
          end
        end
        def create(init=nil,&block)
          @parent = VirtualMachineScaleSetOsProfile.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
