# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Compute
    #
    # Model object.
    #
    class NetworkProfile < Azure::ARM::TypeBase

      # @return [Array<NetworkInterfaces>]
      attr_writer :network_interfaces
      def network_interfaces(name=nil)
        if name and @network_interfaces and @network_interfaces.is_a? Array
          return @network_interfaces.find { | p | p.name == name } if name.is_a? String
          return @network_interfaces[name] if name.is_a? Integer
        end
        @network_interfaces
      end

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        fail ArgumentError, 'property network_interfaces is nil' if @network_interfaces.nil?
        @network_interfaces.each{ |e| e.validate if e.respond_to?(:validate) } unless @network_interfaces.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.network_interfaces
        unless serialized_property.nil?
          serializedarray = []
          serialized_property.each do |element|
            unless element.nil?
              element = element.to_h
            end
            serializedarray.push(element)
          end
          serialized_property = serializedarray
        end
        output_object[:networkInterfaces] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        NetworkProfile.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :network_interfaces
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [NetworkProfile] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:network_interfaces)
          conf.network_interfaces object[:network_interfaces]
          object.delete :network_interfaces
        end

        output_object
      end

      def get_name_template
        'np'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          NetworkProfile.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param network_interfaces
        #        Array<NetworkInterfaces>
        def network_interfaces(props)
          if props.is_a? Array
            @parent.network_interfaces = Array.new if @parent.network_interfaces.nil?
            props.each { |p| @parent.network_interfaces.push _network_interfaces_networkinterfaces(p) }
            return @parent.network_interfaces
          end
          _element = nil
          if _element.nil? and props.is_a? NetworkInterfaces
            _element = props
            _element.parent = @parent
            _element._rsrcpath = 'networkInterfaces'
          end
          if _element.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, NetworkInterfaces)
            _element = NetworkInterfaces.new(@parent, props)
            _element._rsrcpath = 'networkInterfaces'
          end
          if _element.nil?
            _properties = nil
            if _properties.nil? and props.is_a? NetworkInterfacesProperties
              _properties = props
              _properties.parent = @parent
              _properties._rsrcpath = 'networkInterfaces'
            end
            if _properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, NetworkInterfacesProperties)
              _properties = NetworkInterfacesProperties.new(@parent, props)
              _properties._rsrcpath = 'networkInterfaces'
            end
            unless _properties.nil?
              props[:properties] = _properties
              _element = NetworkInterfaces.new(@parent, props)
              _element._rsrcpath = 'networkInterfaces'
              _element.properties = _properties
              _properties.parent = _element
            end
          end
          unless _element.nil?
            @parent.network_interfaces = Array.new if @parent.network_interfaces.nil?
            @parent.network_interfaces.push _element
          end
          @parent.network_interfaces
        end
        def _network_interfaces_networkinterfaces(props)
          if props.is_a? NetworkInterfaces
            props.parent = @parent
            props._rsrcpath = 'networkInterfaces'
            return props
          end
          if (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, NetworkInterfaces)
            _properties = NetworkInterfaces.new(@parent, props)
            _properties._rsrcpath = 'networkInterfaces'
            return _properties
          end
          _properties = nil
          if _properties.nil? and props.is_a? NetworkInterfacesProperties
            _properties = props
            _properties.parent = @parent
            _properties._rsrcpath = 'networkInterfaces'
          end
          if _properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, NetworkInterfacesProperties)
            _properties = NetworkInterfacesProperties.new(@parent, props)
            _properties._rsrcpath = 'networkInterfaces'
          end
          unless _properties.nil?
            props[:properties] = _properties
            network_interfaces = NetworkInterfaces.new(@parent, props)
            network_interfaces._rsrcpath = 'networkInterfaces'
            network_interfaces.properties = _properties
            _properties.parent = network_interfaces
            return network_interfaces
          end
        end
        def create(init=nil,&block)
          @parent = NetworkProfile.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
