# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Compute
    #
    # Model object.
    #
    class VirtualMachineProfile < Azure::ARM::TypeBase

      # @return [VirtualMachineScaleSetOsProfile]
      attr_accessor :os_profile

      # @return [VirtualMachineScaleSetStorageProfile]
      attr_accessor :storage_profile

      # @return [VirtualMachineScaleSetExtensionProfile]
      attr_accessor :extension_profile

      # @return [VirtualMachineScaleSetNetworkProfile]
      attr_accessor :network_profile

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        fail ArgumentError, 'property os_profile is nil' if @os_profile.nil?
        fail ArgumentError, 'property storage_profile is nil' if @storage_profile.nil?
        fail ArgumentError, 'property network_profile is nil' if @network_profile.nil?
        @os_profile.validate unless @os_profile.nil?
        @storage_profile.validate unless @storage_profile.nil?
        @extension_profile.validate unless @extension_profile.nil?
        @network_profile.validate unless @network_profile.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.os_profile
        unless serialized_property.nil?
          serialized_property = serialized_property.to_h
        end
        output_object[:osProfile] = serialized_property unless serialized_property.nil?

        serialized_property = object.storage_profile
        unless serialized_property.nil?
          serialized_property = serialized_property.to_h
        end
        output_object[:storageProfile] = serialized_property unless serialized_property.nil?

        serialized_property = object.network_profile
        unless serialized_property.nil?
          serialized_property = serialized_property.to_h
        end
        output_object[:networkProfile] = serialized_property unless serialized_property.nil?

        serialized_property = object.extension_profile
        unless serialized_property.nil?
          serialized_property = serialized_property.to_h
        end
        output_object[:extensionProfile] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        VirtualMachineProfile.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :os_profile
        result.push :storage_profile
        result.push :extension_profile
        result.push :network_profile
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [VirtualMachineProfile] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:os_profile)
          conf.os_profile object[:os_profile]
          object.delete :os_profile
        end

        if object.key?(:storage_profile)
          conf.storage_profile object[:storage_profile]
          object.delete :storage_profile
        end

        if object.key?(:network_profile)
          conf.network_profile object[:network_profile]
          object.delete :network_profile
        end

        if object.key?(:extension_profile)
          conf.extension_profile object[:extension_profile]
          object.delete :extension_profile
        end

        output_object
      end

      def get_name_template
        'vmp'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          VirtualMachineProfile.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param os_profile
        #        VirtualMachineScaleSetOsProfile
        def os_profile(props)
          if @parent.os_profile.nil? and props.is_a? VirtualMachineScaleSetOsProfile
            @parent.os_profile = props
            @parent.os_profile.parent = @parent
            @parent.os_profile._rsrcpath = 'osProfile'
          end
          if @parent.os_profile.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, VirtualMachineScaleSetOsProfile)
            @parent.os_profile = VirtualMachineScaleSetOsProfile.new(@parent, props)
            @parent.os_profile._rsrcpath = 'osProfile'
          end
          @parent.os_profile
        end
        # @param storage_profile
        #        VirtualMachineScaleSetStorageProfile
        def storage_profile(props)
          if @parent.storage_profile.nil? and props.is_a? VirtualMachineScaleSetStorageProfile
            @parent.storage_profile = props
            @parent.storage_profile.parent = @parent
            @parent.storage_profile._rsrcpath = 'storageProfile'
          end
          if @parent.storage_profile.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, VirtualMachineScaleSetStorageProfile)
            @parent.storage_profile = VirtualMachineScaleSetStorageProfile.new(@parent, props)
            @parent.storage_profile._rsrcpath = 'storageProfile'
          end
          @parent.storage_profile
        end
        # @param extension_profile
        #        VirtualMachineScaleSetExtensionProfile
        def extension_profile(props)
          if @parent.extension_profile.nil? and props.is_a? VirtualMachineScaleSetExtensionProfile
            @parent.extension_profile = props
            @parent.extension_profile.parent = @parent
            @parent.extension_profile._rsrcpath = 'extensionProfile'
          end
          if @parent.extension_profile.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, VirtualMachineScaleSetExtensionProfile)
            @parent.extension_profile = VirtualMachineScaleSetExtensionProfile.new(@parent, props)
            @parent.extension_profile._rsrcpath = 'extensionProfile'
          end
          @parent.extension_profile
        end
        # @param network_profile
        #        VirtualMachineScaleSetNetworkProfile
        def network_profile(props)
          if @parent.network_profile.nil? and props.is_a? VirtualMachineScaleSetNetworkProfile
            @parent.network_profile = props
            @parent.network_profile.parent = @parent
            @parent.network_profile._rsrcpath = 'networkProfile'
          end
          if @parent.network_profile.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, VirtualMachineScaleSetNetworkProfile)
            @parent.network_profile = VirtualMachineScaleSetNetworkProfile.new(@parent, props)
            @parent.network_profile._rsrcpath = 'networkProfile'
          end
          @parent.network_profile
        end
        def create(init=nil,&block)
          @parent = VirtualMachineProfile.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
