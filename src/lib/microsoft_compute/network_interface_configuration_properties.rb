# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Compute
    #
    # Model object.
    #
    class NetworkInterfaceConfigurationProperties < Azure::ARM::TypeBase

      # @return [Boolean]
      attr_accessor :primary

      # @return [Array<IpConfiguration>]
      attr_writer :ip_configurations
      def ip_configurations(name=nil)
        if name and @ip_configurations and @ip_configurations.is_a? Array
          return @ip_configurations.find { | p | p.name == name } if name.is_a? String
          return @ip_configurations[name] if name.is_a? Integer
        end
        @ip_configurations
      end

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @ip_configurations.each{ |e| e.validate if e.respond_to?(:validate) } unless @ip_configurations.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.primary
        output_object[:primary] = serialized_property unless serialized_property.nil?

        serialized_property = object.ip_configurations
        unless serialized_property.nil?
          serializedarray = []
          serialized_property.each do |element|
            unless element.nil?
              element = element.to_h
            end
            serializedarray.push(element)
          end
          serialized_property = serializedarray
        end
        output_object[:ipConfigurations] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        NetworkInterfaceConfigurationProperties.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :primary
        result.push :ip_configurations
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [NetworkInterfaceConfigurationProperties] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:primary)
          conf.primary object[:primary]
          object.delete :primary
        end

        if object.key?(:ip_configurations)
          conf.ip_configurations object[:ip_configurations]
          object.delete :ip_configurations
        end

        output_object
      end

      def get_name_template
        'nicp'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          NetworkInterfaceConfigurationProperties.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param primary
        #        Boolean
        def primary(props)
          if props.is_a? TrueClass or props.is_a? FalseClass or props.is_a? Azure::ARM::Expression
            @parent.primary = props
            return
          end
          @parent.primary
        end
        # @param ip_configurations
        #        Array<IpConfiguration>
        def ip_configurations(props)
          if props.is_a? Array
            @parent.ip_configurations = Array.new if @parent.ip_configurations.nil?
            props.each { |p| @parent.ip_configurations.push _ip_configurations_ipconfiguration(p) }
            return @parent.ip_configurations
          end
          _element = nil
          if _element.nil? and props.is_a? IpConfiguration
            _element = props
            _element.parent = @parent
            _element._rsrcpath = 'ipConfigurations'
          end
          if _element.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, IpConfiguration)
            _element = IpConfiguration.new(@parent, props)
            _element._rsrcpath = 'ipConfigurations'
          end
          if _element.nil?
            _properties = nil
            if _properties.nil? and props.is_a? IpConfigurationProperties
              _properties = props
              _properties.parent = @parent
              _properties._rsrcpath = 'ipConfigurations'
            end
            if _properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, IpConfigurationProperties)
              _properties = IpConfigurationProperties.new(@parent, props)
              _properties._rsrcpath = 'ipConfigurations'
            end
            unless _properties.nil?
              props[:properties] = _properties
              _element = IpConfiguration.new(@parent, props)
              _element._rsrcpath = 'ipConfigurations'
              _element.properties = _properties
              _properties.parent = _element
            end
          end
          unless _element.nil?
            @parent.ip_configurations = Array.new if @parent.ip_configurations.nil?
            @parent.ip_configurations.push _element
          end
          @parent.ip_configurations
        end
        def _ip_configurations_ipconfiguration(props)
          if props.is_a? IpConfiguration
            props.parent = @parent
            props._rsrcpath = 'ipConfigurations'
            return props
          end
          if (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, IpConfiguration)
            _properties = IpConfiguration.new(@parent, props)
            _properties._rsrcpath = 'ipConfigurations'
            return _properties
          end
          _properties = nil
          if _properties.nil? and props.is_a? IpConfigurationProperties
            _properties = props
            _properties.parent = @parent
            _properties._rsrcpath = 'ipConfigurations'
          end
          if _properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, IpConfigurationProperties)
            _properties = IpConfigurationProperties.new(@parent, props)
            _properties._rsrcpath = 'ipConfigurations'
          end
          unless _properties.nil?
            props[:properties] = _properties
            ip_configurations = IpConfiguration.new(@parent, props)
            ip_configurations._rsrcpath = 'ipConfigurations'
            ip_configurations.properties = _properties
            _properties.parent = ip_configurations
            return ip_configurations
          end
        end
        def create(init=nil,&block)
          @parent = NetworkInterfaceConfigurationProperties.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
