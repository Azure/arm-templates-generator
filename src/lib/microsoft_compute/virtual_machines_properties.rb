# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Compute
    #
    # Model object.
    #
    class VirtualMachinesProperties < Azure::ARM::TypeBase

      # @return Microsoft.Compute/virtualMachines - Availability set
      attr_accessor :availability_set

      # @return Microsoft.Compute/virtualMachines - Hardware profile
      attr_accessor :hardware_profile

      # @return Microsoft.Compute/virtualMachines - Storage profile
      attr_accessor :storage_profile

      # @return Mirosoft.Compute/virtualMachines - Operating system profile
      attr_accessor :os_profile

      # @return Microsoft.Compute/virtualMachines - Network profile
      attr_accessor :network_profile

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.availability_set
        if serialized_property.is_a? Id
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:availabilitySet] = serialized_property unless serialized_property.nil?

        serialized_property = object.hardware_profile
        if serialized_property.is_a? HardwareProfile
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:hardwareProfile] = serialized_property unless serialized_property.nil?

        serialized_property = object.storage_profile
        if serialized_property.is_a? StorageProfile
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:storageProfile] = serialized_property unless serialized_property.nil?

        serialized_property = object.os_profile
        if serialized_property.is_a? OsProfile
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:osProfile] = serialized_property unless serialized_property.nil?

        serialized_property = object.network_profile
        if serialized_property.is_a? NetworkProfile
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:networkProfile] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        VirtualMachinesProperties.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :availability_set
        result.push :hardware_profile
        result.push :storage_profile
        result.push :os_profile
        result.push :network_profile
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [VirtualMachinesProperties] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:availability_set)
          conf.availability_set object[:availability_set]
          object.delete :availability_set
        end

        if object.key?(:hardware_profile)
          conf.hardware_profile object[:hardware_profile]
          object.delete :hardware_profile
        end

        if object.key?(:storage_profile)
          conf.storage_profile object[:storage_profile]
          object.delete :storage_profile
        end

        if object.key?(:os_profile)
          conf.os_profile object[:os_profile]
          object.delete :os_profile
        end

        if object.key?(:network_profile)
          conf.network_profile object[:network_profile]
          object.delete :network_profile
        end

        output_object
      end

      def get_name_template
        'vmp'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          VirtualMachinesProperties.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param availability_set
        #        Id
        #        Expression
        def availability_set(props)
          if @parent.availability_set.nil? and props.is_a? Id
            @parent.availability_set = props
            @parent.availability_set.parent = @parent
            @parent.availability_set._rsrcpath = 'availabilitySet'
          end
          if @parent.availability_set.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, Id)
            @parent.availability_set = Id.new(@parent, props)
            @parent.availability_set._rsrcpath = 'availabilitySet'
          end
          if @parent.availability_set.nil? and (props.respond_to? :to_rsrcid)
            @parent.availability_set = Id.new(@parent, id: props.to_rsrcid.to_s)
            if props.is_a? Azure::ARM::TypeBase and !props.containing_resource.nil?
              @parent.containing_resource.add_dependency props.containing_resource
            end
          end
          if @parent.availability_set.nil? and props.is_a? Azure::ARM::Expression
            @parent.availability_set = props
          end
          @parent.availability_set
        end
        # @param hardware_profile
        #        HardwareProfile
        #        Expression
        def hardware_profile(props)
          if @parent.hardware_profile.nil? and props.is_a? HardwareProfile
            @parent.hardware_profile = props
            @parent.hardware_profile.parent = @parent
            @parent.hardware_profile._rsrcpath = 'hardwareProfile'
          end
          if @parent.hardware_profile.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, HardwareProfile)
            @parent.hardware_profile = HardwareProfile.new(@parent, props)
            @parent.hardware_profile._rsrcpath = 'hardwareProfile'
          end
          if @parent.hardware_profile.nil? and props.is_a? Azure::ARM::Expression
            @parent.hardware_profile = props
          end
          @parent.hardware_profile
        end
        # @param storage_profile
        #        StorageProfile
        #        Expression
        def storage_profile(props)
          if @parent.storage_profile.nil? and props.is_a? StorageProfile
            @parent.storage_profile = props
            @parent.storage_profile.parent = @parent
            @parent.storage_profile._rsrcpath = 'storageProfile'
          end
          if @parent.storage_profile.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, StorageProfile)
            @parent.storage_profile = StorageProfile.new(@parent, props)
            @parent.storage_profile._rsrcpath = 'storageProfile'
          end
          if @parent.storage_profile.nil? and props.is_a? Azure::ARM::Expression
            @parent.storage_profile = props
          end
          @parent.storage_profile
        end
        # @param os_profile
        #        OsProfile
        #        Expression
        def os_profile(props)
          if @parent.os_profile.nil? and props.is_a? OsProfile
            @parent.os_profile = props
            @parent.os_profile.parent = @parent
            @parent.os_profile._rsrcpath = 'osProfile'
          end
          if @parent.os_profile.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, OsProfile)
            @parent.os_profile = OsProfile.new(@parent, props)
            @parent.os_profile._rsrcpath = 'osProfile'
          end
          if @parent.os_profile.nil? and props.is_a? Azure::ARM::Expression
            @parent.os_profile = props
          end
          @parent.os_profile
        end
        # @param network_profile
        #        NetworkProfile
        #        Expression
        def network_profile(props)
          if @parent.network_profile.nil? and props.is_a? NetworkProfile
            @parent.network_profile = props
            @parent.network_profile.parent = @parent
            @parent.network_profile._rsrcpath = 'networkProfile'
          end
          if @parent.network_profile.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, NetworkProfile)
            @parent.network_profile = NetworkProfile.new(@parent, props)
            @parent.network_profile._rsrcpath = 'networkProfile'
          end
          if @parent.network_profile.nil? and props.is_a? Azure::ARM::Expression
            @parent.network_profile = props
          end
          @parent.network_profile
        end
        def create(init=nil,&block)
          @parent = VirtualMachinesProperties.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
