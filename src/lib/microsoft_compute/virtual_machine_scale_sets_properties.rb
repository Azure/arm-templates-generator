# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Compute
    #
    # Model object.
    #
    class VirtualMachineScaleSetsProperties < Azure::ARM::TypeBase

      # @return Microsoft.Compute/virtualMachineScaleSets - Upgrade policy
      attr_accessor :upgrade_policy

      # @return Microsoft.Compute/virtualMachineScaleSets - Virtual machine
      # policy
      attr_accessor :virtual_machine_profile

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.upgrade_policy
        if serialized_property.is_a? UpgradePolicy
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:upgradePolicy] = serialized_property unless serialized_property.nil?

        serialized_property = object.virtual_machine_profile
        if serialized_property.is_a? VirtualMachineProfile
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:virtualMachineProfile] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        VirtualMachineScaleSetsProperties.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :upgrade_policy
        result.push :virtual_machine_profile
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [VirtualMachineScaleSetsProperties] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:upgrade_policy)
          conf.upgrade_policy object[:upgrade_policy]
          object.delete :upgrade_policy
        end

        if object.key?(:virtual_machine_profile)
          conf.virtual_machine_profile object[:virtual_machine_profile]
          object.delete :virtual_machine_profile
        end

        output_object
      end

      def get_name_template
        'vmssp'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          VirtualMachineScaleSetsProperties.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param upgrade_policy
        #        UpgradePolicy
        #        Expression
        def upgrade_policy(props)
          if @parent.upgrade_policy.nil? and props.is_a? UpgradePolicy
            @parent.upgrade_policy = props
            @parent.upgrade_policy.parent = @parent
            @parent.upgrade_policy._rsrcpath = 'upgradePolicy'
          end
          if @parent.upgrade_policy.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, UpgradePolicy)
            @parent.upgrade_policy = UpgradePolicy.new(@parent, props)
            @parent.upgrade_policy._rsrcpath = 'upgradePolicy'
          end
          if @parent.upgrade_policy.nil? and props.is_a? Azure::ARM::Expression
            @parent.upgrade_policy = props
          end
          @parent.upgrade_policy
        end
        # @param virtual_machine_profile
        #        VirtualMachineProfile
        #        Expression
        def virtual_machine_profile(props)
          if @parent.virtual_machine_profile.nil? and props.is_a? VirtualMachineProfile
            @parent.virtual_machine_profile = props
            @parent.virtual_machine_profile.parent = @parent
            @parent.virtual_machine_profile._rsrcpath = 'virtualMachineProfile'
          end
          if @parent.virtual_machine_profile.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, VirtualMachineProfile)
            @parent.virtual_machine_profile = VirtualMachineProfile.new(@parent, props)
            @parent.virtual_machine_profile._rsrcpath = 'virtualMachineProfile'
          end
          if @parent.virtual_machine_profile.nil? and props.is_a? Azure::ARM::Expression
            @parent.virtual_machine_profile = props
          end
          @parent.virtual_machine_profile
        end
        def create(init=nil,&block)
          @parent = VirtualMachineScaleSetsProperties.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
