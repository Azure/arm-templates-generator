# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Compute
    #
    # Model object.
    #
    class AdditionalUnattendContent < Azure::ARM::TypeBase

      # @return [String]
      attr_accessor :pass

      # @return [String]
      attr_accessor :component

      # @return [String]
      attr_accessor :setting_name

      # @return [String]
      attr_accessor :content

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        fail ArgumentError, 'property pass is nil' if @pass.nil?
        fail ArgumentError, 'property component is nil' if @component.nil?
        fail ArgumentError, 'property setting_name is nil' if @setting_name.nil?
        fail ArgumentError, 'property content is nil' if @content.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.pass
        output_object[:pass] = serialized_property unless serialized_property.nil?

        serialized_property = object.component
        output_object[:component] = serialized_property unless serialized_property.nil?

        serialized_property = object.setting_name
        output_object[:settingName] = serialized_property unless serialized_property.nil?

        serialized_property = object.content
        output_object[:content] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        AdditionalUnattendContent.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :pass
        result.push :component
        result.push :setting_name
        result.push :content
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [AdditionalUnattendContent] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:pass)
          conf.pass object[:pass]
          object.delete :pass
        end

        if object.key?(:component)
          conf.component object[:component]
          object.delete :component
        end

        if object.key?(:setting_name)
          conf.setting_name object[:setting_name]
          object.delete :setting_name
        end

        if object.key?(:content)
          conf.content object[:content]
          object.delete :content
        end

        output_object
      end

      def get_name_template
        'auc'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          AdditionalUnattendContent.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param pass
        #        String
        def pass(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.pass = props
            return
          end
          @parent.pass
        end
        # @param component
        #        String
        def component(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.component = props
            return
          end
          @parent.component
        end
        # @param setting_name
        #        String
        def setting_name(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.setting_name = props
            return
          end
          @parent.setting_name
        end
        # @param content
        #        String
        def content(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.content = props
            return
          end
          @parent.content
        end
        def create(init=nil,&block)
          @parent = AdditionalUnattendContent.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
