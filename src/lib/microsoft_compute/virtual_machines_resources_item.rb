# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Compute
    #
    # Model object.
    #
    class VirtualMachinesResourcesItem < Azure::ARM::TypeBase

      # @return Location to deploy resource to
      attr_accessor :location

      # @return Name-value pairs to add to the resource
      attr_accessor :tags

      # @return [ResourceCopy]
      attr_accessor :copy

      # @return [String]
      attr_accessor :comments

      # @return [virtualMachines_resourcesItem_type] Possible values include:
      # 'extensions'
      attr_accessor :type

      # @return [virtualMachines_resourcesItem_apiVersion] Possible values
      # include: '2015-05-01-preview', '2015-06-15'
      attr_accessor :api_version

      # @return [VirtualMachinesResourcesItemProperties]
      attr_accessor :properties

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        fail ArgumentError, 'property type is nil' if @type.nil?
        fail ArgumentError, 'property api_version is nil' if @api_version.nil?
        fail ArgumentError, 'property properties is nil' if @properties.nil?
        @copy.validate unless @copy.nil?
        @properties.validate unless @properties.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.type
        output_object[:type] = serialized_property unless serialized_property.nil?

        serialized_property = object.api_version
        output_object[:apiVersion] = serialized_property unless serialized_property.nil?

        serialized_property = object.properties
        unless serialized_property.nil?
          serialized_property = serialized_property.to_h
        end
        output_object[:properties] = serialized_property unless serialized_property.nil?

        serialized_property = object.location
        output_object[:location] = serialized_property unless serialized_property.nil?

        serialized_property = object.tags
        output_object[:tags] = serialized_property unless serialized_property.nil?

        serialized_property = object.copy
        unless serialized_property.nil?
          serialized_property = serialized_property.to_h
        end
        output_object[:copy] = serialized_property unless serialized_property.nil?

        serialized_property = object.comments
        output_object[:comments] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        VirtualMachinesResourcesItem.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :properties
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [VirtualMachinesResourcesItem] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:type)
          conf.type object[:type]
          object.delete :type
        end

        if object.key?(:api_version)
          conf.api_version object[:api_version]
          object.delete :api_version
        end

        if object.key?(:properties)
          conf.properties object[:properties]
        end

        if object.key?(:location)
          conf.location object[:location]
          object.delete :location
        end

        if object.key?(:tags)
          conf.tags object[:tags]
          object.delete :tags
        end

        if object.key?(:copy)
          conf.copy object[:copy]
          object.delete :copy
        end

        if object.key?(:comments)
          conf.comments object[:comments]
          object.delete :comments
        end

                unless object.key?(:properties)
          conf.properties object
        end

        output_object
      end

      def get_name_template
        'vmri'
        end

      def initialize(parent, init)
        super(parent)
        @type = 'extensions' if @type.nil?
        @api_version = '2015-06-15' if @api_version.nil?
        if init.is_a? Hash
          VirtualMachinesResourcesItem.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param location
        #        Object
        def location(props)
          if props.is_a? Object or props.is_a? Azure::ARM::Expression
            @parent.location = props
            return
          end
          @parent.location
        end
        # @param tags
        #        Object
        def tags(props)
          if props.is_a? Object or props.is_a? Azure::ARM::Expression
            @parent.tags = props
            return
          end
          @parent.tags
        end
        # @param copy
        #        ResourceCopy
        def copy(props)
          if @parent.copy.nil? and props.is_a? ResourceCopy
            @parent.copy = props
            @parent.copy.parent = @parent
            @parent.copy._rsrcpath = 'copy'
          end
          if @parent.copy.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, ResourceCopy)
            @parent.copy = ResourceCopy.new(@parent, props)
            @parent.copy._rsrcpath = 'copy'
          end
          @parent.copy
        end
        # @param comments
        #        String
        def comments(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.comments = props
            return
          end
          @parent.comments
        end
        # @param api_version
        #        A string, one of '2015-05-01-preview','2015-06-15'
        def api_version(props)
          if props.is_a? String
            fail ArgumentError, "#{props} is an invalid value for @parent.api_version" unless ['2015-05-01-preview','2015-06-15'].index(props)
            @parent.api_version = props
            return
          end
          @parent.api_version
        end
        # @param properties
        #        VirtualMachinesResourcesItemProperties
        def properties(props)
          if @parent.properties.nil? and props.is_a? VirtualMachinesResourcesItemProperties
            @parent.properties = props
            @parent.properties.parent = @parent
            @parent.properties._rsrcpath = 'properties'
          end
          if @parent.properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, VirtualMachinesResourcesItemProperties)
            @parent.properties = VirtualMachinesResourcesItemProperties.new(@parent, props)
            @parent.properties._rsrcpath = 'properties'
          end
          @parent.properties
        end
        # @param publisher
        #        String
        def publisher(props)
          @parent.properties = (VirtualMachinesResourcesItemProperties.new @parent, nil) if @parent.properties.nil?
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.properties.publisher = props
            return
          end
          @parent.properties.publisher
        end
        # @param type_handler_version
        #        String
        def type_handler_version(props)
          @parent.properties = (VirtualMachinesResourcesItemProperties.new @parent, nil) if @parent.properties.nil?
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.properties.type_handler_version = props
            return
          end
          @parent.properties.type_handler_version
        end
        # @param settings
        #        Object
        #        Expression
        def settings(props)
          @parent.properties = (VirtualMachinesResourcesItemProperties.new @parent, nil) if @parent.properties.nil?
          if props.is_a? Object or props.is_a? Azure::ARM::Expression
            @parent.properties.settings = props
            return
          end
          if @parent.properties.settings.nil? and props.is_a? Azure::ARM::Expression
            @parent.properties.settings = props
          end
          @parent.properties.settings
        end
        def create(init=nil,&block)
          @parent = VirtualMachinesResourcesItem.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
