# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Network
    #
    # Model object.
    #
    class VirtualNetworksProperties < Azure::ARM::TypeBase

      # @return Microsoft.Network/virtualNetworks: Address space
      attr_accessor :address_space

      # @return Microsoft.Network/virtualNetworks: DHCP options
      attr_accessor :dhcp_options

      # @return Microsoft.Network/virtualNetworks: Subnets
      attr_writer :subnets
      def subnets(name=nil)
        if name and @subnets and @subnets.is_a? Array
          return @subnets.find { | p | p.name == name } if name.is_a? String
          return @subnets[name] if name.is_a? Integer
        end
        @subnets
      end

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.address_space
        if serialized_property.is_a? AddressSpace
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:addressSpace] = serialized_property unless serialized_property.nil?

        serialized_property = object.dhcp_options
        if serialized_property.is_a? DhcpOptions
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:dhcpOptions] = serialized_property unless serialized_property.nil?

        serialized_property = object.subnets
        if serialized_property.is_a? Array
          unless serialized_property.nil?
            serializedarray = []
            serialized_property.each do |element|
              unless element.nil?
                element = element.to_h
              end
              serializedarray.push(element)
            end
            serialized_property = serializedarray
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:subnets] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        VirtualNetworksProperties.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :address_space
        result.push :dhcp_options
        result.push :subnets
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [VirtualNetworksProperties] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:address_space)
          conf.address_space object[:address_space]
          object.delete :address_space
        end

        if object.key?(:dhcp_options)
          conf.dhcp_options object[:dhcp_options]
          object.delete :dhcp_options
        end

        if object.key?(:subnets)
          conf.subnets object[:subnets]
          object.delete :subnets
        end

        output_object
      end

      def get_name_template
        'vnp'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          VirtualNetworksProperties.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param address_space
        #        AddressSpace
        #        Expression
        def address_space(props)
          if @parent.address_space.nil? and props.is_a? AddressSpace
            @parent.address_space = props
            @parent.address_space.parent = @parent
            @parent.address_space._rsrcpath = 'addressSpace'
          end
          if @parent.address_space.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, AddressSpace)
            @parent.address_space = AddressSpace.new(@parent, props)
            @parent.address_space._rsrcpath = 'addressSpace'
          end
          if @parent.address_space.nil? and props.is_a? Azure::ARM::Expression
            @parent.address_space = props
          end
          @parent.address_space
        end
        # @param dhcp_options
        #        DhcpOptions
        #        Expression
        def dhcp_options(props)
          if @parent.dhcp_options.nil? and props.is_a? DhcpOptions
            @parent.dhcp_options = props
            @parent.dhcp_options.parent = @parent
            @parent.dhcp_options._rsrcpath = 'dhcpOptions'
          end
          if @parent.dhcp_options.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, DhcpOptions)
            @parent.dhcp_options = DhcpOptions.new(@parent, props)
            @parent.dhcp_options._rsrcpath = 'dhcpOptions'
          end
          if @parent.dhcp_options.nil? and props.is_a? Azure::ARM::Expression
            @parent.dhcp_options = props
          end
          @parent.dhcp_options
        end
        # @param subnets
        #        Array<Subnet>
        #        Expression
        def subnets(props)
          if props.is_a? Array
            @parent.subnets = Array.new if @parent.subnets.nil?
            props.each { |p| @parent.subnets.push _subnets_subnet(p) }
            return @parent.subnets
          end
          _element = nil
          if _element.nil? and props.is_a? Subnet
            _element = props
            _element.parent = @parent
            _element._rsrcpath = 'subnets'
          end
          if _element.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, Subnet)
            _element = Subnet.new(@parent, props)
            _element._rsrcpath = 'subnets'
          end
          if _element.nil?
            _properties = nil
            if _properties.nil? and props.is_a? SubnetProperties
              _properties = props
              _properties.parent = @parent
              _properties._rsrcpath = 'subnets'
            end
            if _properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SubnetProperties)
              _properties = SubnetProperties.new(@parent, props)
              _properties._rsrcpath = 'subnets'
            end
            unless _properties.nil?
              props[:properties] = _properties
              _element = Subnet.new(@parent, props)
              _element._rsrcpath = 'subnets'
              _element.properties = _properties
              _properties.parent = _element
            end
          end
          unless _element.nil?
            @parent.subnets = Array.new if @parent.subnets.nil?
            @parent.subnets.push _element
          end
          if @parent.subnets.nil? and props.is_a? Azure::ARM::Expression
            @parent.subnets = props
          end
          @parent.subnets
        end
        def _subnets_subnet(props)
          if props.is_a? Subnet
            props.parent = @parent
            props._rsrcpath = 'subnets'
            return props
          end
          if (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, Subnet)
            _properties = Subnet.new(@parent, props)
            _properties._rsrcpath = 'subnets'
            return _properties
          end
          _properties = nil
          if _properties.nil? and props.is_a? SubnetProperties
            _properties = props
            _properties.parent = @parent
            _properties._rsrcpath = 'subnets'
          end
          if _properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SubnetProperties)
            _properties = SubnetProperties.new(@parent, props)
            _properties._rsrcpath = 'subnets'
          end
          unless _properties.nil?
            props[:properties] = _properties
            subnets = Subnet.new(@parent, props)
            subnets._rsrcpath = 'subnets'
            subnets.properties = _properties
            _properties.parent = subnets
            return subnets
          end
        end
        def create(init=nil,&block)
          @parent = VirtualNetworksProperties.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
