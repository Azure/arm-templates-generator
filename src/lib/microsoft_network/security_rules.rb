# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Network
  #
  # Model object.
  #
  class SecurityRules < Azure::ARM::TypeBase

    # @return [String]
    attr_accessor :name

    # @return [SecurityruleProperties]
    attr_accessor :properties

    #
    # Validate the object. Throws ValidationError if validation fails.
    #
    def validate
      fail ArgumentError, 'property name is nil' if @name.nil?
      fail ArgumentError, 'property properties is nil' if @properties.nil?
      @properties.validate unless @properties.nil?
    end

    #
    # Serializes given Model object into Ruby Hash.
    # @param object Model object to serialize.
    # @return [Hash] Serialized object in form of Ruby Hash.
    #
    def self.serialize_object(output_object, object)
      Azure::ARM::TypeBase.serialize_object(output_object, object)
      object.validate

      serialized_property = object.name
      output_object[:name] = serialized_property unless serialized_property.nil?

      serialized_property = object.properties
      unless serialized_property.nil?
        serialized_property = serialized_property.to_h
      end
      output_object[:properties] = serialized_property unless serialized_property.nil?

      output_object
    end

    def to_h
      hash = {}
      SecurityRules.serialize_object(hash,self)
      hash
    end

    def self.ds_properties
      result = Array.new
      result.push :properties
      result
    end

    #
    # Deserializes given Ruby Hash into Model object.
    # @param object [Hash] Ruby Hash object to deserialize.
    # @return [SecurityRules] Deserialized object.
    #
    def self.deserialize_object(output_object, object)
      return if object.nil?
      conf = Configurator.new
      conf.parent = output_object

      if object.key?(:name)
        conf.name object[:name]
        object.delete :name
      end

      if object.key?(:properties)
        conf.properties object[:properties]
      end

      unless object.key?(:properties)
        conf.properties object
      end

      output_object
    end

    def get_name_template
      'sr'
    end

    def initialize(parent, init)
      super(parent)
      if init.is_a? Hash
        SecurityRules.deserialize_object self, init.clone
      end
    end

    # Configuration code
    class Configurator < Azure::ARM::ResourceConfigurator
      attr_accessor :parent
      # @param name
      #        String
      def name(props)
        if props.is_a? String or props.is_a? Azure::ARM::Expression
          @parent.name = props
          return
        end
        @parent.name
      end
      # @param properties
      #        SecurityruleProperties
      def properties(props)
        if @parent.properties.nil? and props.is_a? SecurityruleProperties
          @parent.properties = props
          @parent.properties.parent = @parent
          @parent.properties._rsrcpath = 'properties'
        end
        if @parent.properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, SecurityruleProperties)
          @parent.properties = SecurityruleProperties.new(@parent, props)
          @parent.properties._rsrcpath = 'properties'
        end
        @parent.properties
      end
      # @param description
      #        String
      def description(props)
        @parent.properties = (SecurityruleProperties.new @parent, nil) if @parent.properties.nil?
        if props.is_a? String or props.is_a? Azure::ARM::Expression
          @parent.properties.description = props
          return
        end
        @parent.properties.description
      end
      # @param protocol
      #        A string, one of 'Tcp','Udp','*'
      #        Expression
      def protocol(props)
        @parent.properties = (SecurityruleProperties.new @parent, nil) if @parent.properties.nil?
        if props.is_a? String
          fail ArgumentError, "#{props} is an invalid value for @parent.properties.protocol" unless ['Tcp','Udp','*'].index(props)
          @parent.properties.protocol = props
          return
        end
        if @parent.properties.protocol.nil? and props.is_a? Azure::ARM::Expression
          @parent.properties.protocol = props
        end
        @parent.properties.protocol
      end
      # @param source_port_range
      #        String
      def source_port_range(props)
        @parent.properties = (SecurityruleProperties.new @parent, nil) if @parent.properties.nil?
        if props.is_a? String or props.is_a? Azure::ARM::Expression
          @parent.properties.source_port_range = props
          return
        end
        @parent.properties.source_port_range
      end
      # @param destination_port_range
      #        String
      def destination_port_range(props)
        @parent.properties = (SecurityruleProperties.new @parent, nil) if @parent.properties.nil?
        if props.is_a? String or props.is_a? Azure::ARM::Expression
          @parent.properties.destination_port_range = props
          return
        end
        @parent.properties.destination_port_range
      end
      # @param source_address_prefix
      #        String
      def source_address_prefix(props)
        @parent.properties = (SecurityruleProperties.new @parent, nil) if @parent.properties.nil?
        if props.is_a? String or props.is_a? Azure::ARM::Expression
          @parent.properties.source_address_prefix = props
          return
        end
        @parent.properties.source_address_prefix
      end
      # @param destination_address_prefix
      #        String
      def destination_address_prefix(props)
        @parent.properties = (SecurityruleProperties.new @parent, nil) if @parent.properties.nil?
        if props.is_a? String or props.is_a? Azure::ARM::Expression
          @parent.properties.destination_address_prefix = props
          return
        end
        @parent.properties.destination_address_prefix
      end
      # @param access
      #        A string, one of 'Allow','Deny'
      #        Expression
      def access(props)
        @parent.properties = (SecurityruleProperties.new @parent, nil) if @parent.properties.nil?
        if props.is_a? String
          fail ArgumentError, "#{props} is an invalid value for @parent.properties.access" unless ['Allow','Deny'].index(props)
          @parent.properties.access = props
          return
        end
        if @parent.properties.access.nil? and props.is_a? Azure::ARM::Expression
          @parent.properties.access = props
        end
        @parent.properties.access
      end
      # @param priority
      #        Fixnum
      #        Expression
      def priority(props)
        @parent.properties = (SecurityruleProperties.new @parent, nil) if @parent.properties.nil?
        if props.is_a? Fixnum or props.is_a? Azure::ARM::Expression
          @parent.properties.priority = props
          return
        end
        if @parent.properties.priority.nil? and props.is_a? Azure::ARM::Expression
          @parent.properties.priority = props
        end
        @parent.properties.priority
      end
      # @param direction
      #        A string, one of 'Inbound','Outbound'
      #        Expression
      def direction(props)
        @parent.properties = (SecurityruleProperties.new @parent, nil) if @parent.properties.nil?
        if props.is_a? String
          fail ArgumentError, "#{props} is an invalid value for @parent.properties.direction" unless ['Inbound','Outbound'].index(props)
          @parent.properties.direction = props
          return
        end
        if @parent.properties.direction.nil? and props.is_a? Azure::ARM::Expression
          @parent.properties.direction = props
        end
        @parent.properties.direction
      end
      def create(init=nil,&block)
        @parent = SecurityRules.new nil, init
        self.instance_exec(@parent,&block) if block
        @parent
      end
    end
    def configure(&block)
      conf = Configurator.new
      conf.parent = self
      conf.instance_exec(self,&block) if block
      self
    end
  end
end
