# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Network
    #
    # Model object.
    #
    class NetworkInterfaceDnsSettings < Azure::ARM::TypeBase

      # @return [Array<String>]
      attr_writer :dns_servers
      def dns_servers(name=nil)
        if name and @dns_servers and @dns_servers.is_a? Array
          return @dns_servers.find { | p | p.name == name } if name.is_a? String
          return @dns_servers[name] if name.is_a? Integer
        end
        @dns_servers
      end

      # @return [String]
      attr_accessor :internal_dns_name_label

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @dns_servers.each{ |e| e.validate if e.respond_to?(:validate) } unless @dns_servers.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.dns_servers
        output_object[:dnsServers] = serialized_property unless serialized_property.nil?

        serialized_property = object.internal_dns_name_label
        output_object[:internalDnsNameLabel] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        NetworkInterfaceDnsSettings.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :dns_servers
        result.push :internal_dns_name_label
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [NetworkInterfaceDnsSettings] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:dns_servers)
          conf.dns_servers object[:dns_servers]
          object.delete :dns_servers
        end

        if object.key?(:internal_dns_name_label)
          conf.internal_dns_name_label object[:internal_dns_name_label]
          object.delete :internal_dns_name_label
        end

        output_object
      end

      def get_name_template
        'nids'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          NetworkInterfaceDnsSettings.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param dns_servers
        #        Array<String>
        def dns_servers(props)
          if props.is_a? Array
            @parent.dns_servers = Array.new if @parent.dns_servers.nil?
            props.each { |p| @parent.dns_servers.push _dns_servers_string(p) }
            return @parent.dns_servers
          end
          _element = nil
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            _element = props
            return
          end
          unless _element.nil?
            @parent.dns_servers = Array.new if @parent.dns_servers.nil?
            @parent.dns_servers.push _element
          end
          @parent.dns_servers
        end
        def _dns_servers_string(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            return props
          end
        end
        # @param internal_dns_name_label
        #        String
        def internal_dns_name_label(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.internal_dns_name_label = props
            return
          end
          @parent.internal_dns_name_label
        end
        def create(init=nil,&block)
          @parent = NetworkInterfaceDnsSettings.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
