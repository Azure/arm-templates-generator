# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Network
    #
    # Model object.
    #
    class NetworkInterfacesProperties < Azure::ARM::TypeBase

      # @return Microsoft.Network/networkInterfaces: Enable IP forwarding
      attr_accessor :enable_ipforwarding

      # @return Microsoft.Network/networkInterfaces: Network security group
      attr_accessor :network_security_group

      # @return Microsoft.Network/networkInterfaces: IP configurations
      attr_writer :ip_configurations
      def ip_configurations(name=nil)
        if name and @ip_configurations and @ip_configurations.is_a? Array
          return @ip_configurations.find { | p | p.name == name } if name.is_a? String
          return @ip_configurations[name] if name.is_a? Integer
        end
        @ip_configurations
      end

      # @return Microsoft.Network/networkInterfaces: DNS settings
      attr_accessor :dns_settings

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.enable_ipforwarding
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:enableIPForwarding] = serialized_property unless serialized_property.nil?

        serialized_property = object.network_security_group
        if serialized_property.is_a? Id
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:networkSecurityGroup] = serialized_property unless serialized_property.nil?

        serialized_property = object.ip_configurations
        if serialized_property.is_a? Array
          unless serialized_property.nil?
            serializedarray = []
            serialized_property.each do |element|
              unless element.nil?
                element = element.to_h
              end
              serializedarray.push(element)
            end
            serialized_property = serializedarray
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:ipConfigurations] = serialized_property unless serialized_property.nil?

        serialized_property = object.dns_settings
        if serialized_property.is_a? NetworkInterfaceDnsSettings
          unless serialized_property.nil?
            serialized_property = serialized_property.to_h
          end
        end
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:dnsSettings] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        NetworkInterfacesProperties.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :enable_ipforwarding
        result.push :network_security_group
        result.push :ip_configurations
        result.push :dns_settings
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [NetworkInterfacesProperties] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:enable_ipforwarding)
          conf.enable_ipforwarding object[:enable_ipforwarding]
          object.delete :enable_ipforwarding
        end

        if object.key?(:network_security_group)
          conf.network_security_group object[:network_security_group]
          object.delete :network_security_group
        end

        if object.key?(:ip_configurations)
          conf.ip_configurations object[:ip_configurations]
          object.delete :ip_configurations
        end

        if object.key?(:dns_settings)
          conf.dns_settings object[:dns_settings]
          object.delete :dns_settings
        end

        output_object
      end

      def get_name_template
        'nip'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          NetworkInterfacesProperties.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param enable_ipforwarding
        #        Boolean
        #        Expression
        def enable_ipforwarding(props)
          if props.is_a? TrueClass or props.is_a? FalseClass or props.is_a? Azure::ARM::Expression
            @parent.enable_ipforwarding = props
            return
          end
          if @parent.enable_ipforwarding.nil? and props.is_a? Azure::ARM::Expression
            @parent.enable_ipforwarding = props
          end
          @parent.enable_ipforwarding
        end
        # @param network_security_group
        #        Id
        #        Expression
        def network_security_group(props)
          if @parent.network_security_group.nil? and props.is_a? Id
            @parent.network_security_group = props
            @parent.network_security_group.parent = @parent
            @parent.network_security_group._rsrcpath = 'networkSecurityGroup'
          end
          if @parent.network_security_group.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, Id)
            @parent.network_security_group = Id.new(@parent, props)
            @parent.network_security_group._rsrcpath = 'networkSecurityGroup'
          end
          if @parent.network_security_group.nil? and (props.respond_to? :to_rsrcid)
            @parent.network_security_group = Id.new(@parent, id: props.to_rsrcid.to_s)
            if props.is_a? Azure::ARM::TypeBase and !props.containing_resource.nil?
              @parent.containing_resource.add_dependency props.containing_resource
            end
          end
          if @parent.network_security_group.nil? and props.is_a? Azure::ARM::Expression
            @parent.network_security_group = props
          end
          @parent.network_security_group
        end
        # @param ip_configurations
        #        Array<IpConfiguration>
        #        Expression
        def ip_configurations(props)
          if props.is_a? Array
            @parent.ip_configurations = Array.new if @parent.ip_configurations.nil?
            props.each { |p| @parent.ip_configurations.push _ip_configurations_ipconfiguration(p) }
            return @parent.ip_configurations
          end
          _element = nil
          if _element.nil? and props.is_a? IpConfiguration
            _element = props
            _element.parent = @parent
            _element._rsrcpath = 'ipConfigurations'
          end
          if _element.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, IpConfiguration)
            _element = IpConfiguration.new(@parent, props)
            _element._rsrcpath = 'ipConfigurations'
          end
          if _element.nil?
            _properties = nil
            if _properties.nil? and props.is_a? IpConfigurationProperties
              _properties = props
              _properties.parent = @parent
              _properties._rsrcpath = 'ipConfigurations'
            end
            if _properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, IpConfigurationProperties)
              _properties = IpConfigurationProperties.new(@parent, props)
              _properties._rsrcpath = 'ipConfigurations'
            end
            unless _properties.nil?
              props[:properties] = _properties
              _element = IpConfiguration.new(@parent, props)
              _element._rsrcpath = 'ipConfigurations'
              _element.properties = _properties
              _properties.parent = _element
            end
          end
          unless _element.nil?
            @parent.ip_configurations = Array.new if @parent.ip_configurations.nil?
            @parent.ip_configurations.push _element
          end
          if @parent.ip_configurations.nil? and props.is_a? Azure::ARM::Expression
            @parent.ip_configurations = props
          end
          @parent.ip_configurations
        end
        def _ip_configurations_ipconfiguration(props)
          if props.is_a? IpConfiguration
            props.parent = @parent
            props._rsrcpath = 'ipConfigurations'
            return props
          end
          if (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, IpConfiguration)
            _properties = IpConfiguration.new(@parent, props)
            _properties._rsrcpath = 'ipConfigurations'
            return _properties
          end
          _properties = nil
          if _properties.nil? and props.is_a? IpConfigurationProperties
            _properties = props
            _properties.parent = @parent
            _properties._rsrcpath = 'ipConfigurations'
          end
          if _properties.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, IpConfigurationProperties)
            _properties = IpConfigurationProperties.new(@parent, props)
            _properties._rsrcpath = 'ipConfigurations'
          end
          unless _properties.nil?
            props[:properties] = _properties
            ip_configurations = IpConfiguration.new(@parent, props)
            ip_configurations._rsrcpath = 'ipConfigurations'
            ip_configurations.properties = _properties
            _properties.parent = ip_configurations
            return ip_configurations
          end
        end
        # @param dns_settings
        #        NetworkInterfaceDnsSettings
        #        Expression
        def dns_settings(props)
          if @parent.dns_settings.nil? and props.is_a? NetworkInterfaceDnsSettings
            @parent.dns_settings = props
            @parent.dns_settings.parent = @parent
            @parent.dns_settings._rsrcpath = 'dnsSettings'
          end
          if @parent.dns_settings.nil? and (props.is_a? Hash) and (Azure::ARM::TypeBase.matches_type props, NetworkInterfaceDnsSettings)
            @parent.dns_settings = NetworkInterfaceDnsSettings.new(@parent, props)
            @parent.dns_settings._rsrcpath = 'dnsSettings'
          end
          if @parent.dns_settings.nil? and props.is_a? Azure::ARM::Expression
            @parent.dns_settings = props
          end
          @parent.dns_settings
        end
        def create(init=nil,&block)
          @parent = NetworkInterfacesProperties.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
