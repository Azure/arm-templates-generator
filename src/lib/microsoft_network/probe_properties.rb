# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

require_relative '../arm/module_definition'
require_relative './module_definition'

module Azure::ARM::Network
    #
    # Model object.
    #
    class ProbeProperties < Azure::ARM::TypeBase

      # @return
      attr_accessor :protocol

      # @return
      attr_accessor :port

      # @return [String]
      attr_accessor :request_path

      # @return
      attr_accessor :interval_in_seconds

      # @return
      attr_accessor :number_of_probes

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        fail ArgumentError, 'property protocol is nil' if @protocol.nil?
        fail ArgumentError, 'property port is nil' if @port.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(output_object, object)
        Azure::ARM::TypeBase.serialize_object(output_object, object)
        object.validate

        serialized_property = object.protocol
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:protocol] = serialized_property unless serialized_property.nil?

        serialized_property = object.port
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:port] = serialized_property unless serialized_property.nil?

        serialized_property = object.request_path
        output_object[:requestPath] = serialized_property unless serialized_property.nil?

        serialized_property = object.interval_in_seconds
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:intervalInSeconds] = serialized_property unless serialized_property.nil?

        serialized_property = object.number_of_probes
        if serialized_property.is_a? Azure::ARM::Expression
          unless serialized_property.nil?
            serialized_property = serialized_property.to_s
          end
        end
        output_object[:numberOfProbes] = serialized_property unless serialized_property.nil?

        output_object
      end

      def to_h
        hash = {}
        ProbeProperties.serialize_object(hash,self)
        hash
      end

      def self.ds_properties
        result = Array.new 
        result.push :protocol
        result.push :port
        result.push :request_path
        result.push :interval_in_seconds
        result.push :number_of_probes
        result
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [ProbeProperties] Deserialized object.
      #
      def self.deserialize_object(output_object, object)
        return if object.nil?
        conf = Configurator.new
        conf.parent = output_object

        if object.key?(:protocol)
          conf.protocol object[:protocol]
          object.delete :protocol
        end

        if object.key?(:port)
          conf.port object[:port]
          object.delete :port
        end

        if object.key?(:request_path)
          conf.request_path object[:request_path]
          object.delete :request_path
        end

        if object.key?(:interval_in_seconds)
          conf.interval_in_seconds object[:interval_in_seconds]
          object.delete :interval_in_seconds
        end

        if object.key?(:number_of_probes)
          conf.number_of_probes object[:number_of_probes]
          object.delete :number_of_probes
        end

        output_object
      end

      def get_name_template
        'pp'
        end

      def initialize(parent, init)
        super(parent)
        if init.is_a? Hash
          ProbeProperties.deserialize_object self, init.clone
        end
      end

      # Configuration code
      class Configurator < Azure::ARM::ResourceConfigurator
        attr_accessor :parent
        # @param protocol
        #        A string, one of 'Http','Tcp'
        #        Expression
        def protocol(props)
          if props.is_a? String
            fail ArgumentError, "#{props} is an invalid value for @parent.protocol" unless ['Http','Tcp'].index(props)
            @parent.protocol = props
            return
          end
          if @parent.protocol.nil? and props.is_a? Azure::ARM::Expression
            @parent.protocol = props
          end
          @parent.protocol
        end
        # @param port
        #        Fixnum
        #        Expression
        def port(props)
          if props.is_a? Fixnum or props.is_a? Azure::ARM::Expression
            @parent.port = props
            return
          end
          if @parent.port.nil? and props.is_a? Azure::ARM::Expression
            @parent.port = props
          end
          @parent.port
        end
        # @param request_path
        #        String
        def request_path(props)
          if props.is_a? String or props.is_a? Azure::ARM::Expression
            @parent.request_path = props
            return
          end
          @parent.request_path
        end
        # @param interval_in_seconds
        #        Fixnum
        #        Expression
        def interval_in_seconds(props)
          if props.is_a? Fixnum or props.is_a? Azure::ARM::Expression
            @parent.interval_in_seconds = props
            return
          end
          if @parent.interval_in_seconds.nil? and props.is_a? Azure::ARM::Expression
            @parent.interval_in_seconds = props
          end
          @parent.interval_in_seconds
        end
        # @param number_of_probes
        #        Fixnum
        #        Expression
        def number_of_probes(props)
          if props.is_a? Fixnum or props.is_a? Azure::ARM::Expression
            @parent.number_of_probes = props
            return
          end
          if @parent.number_of_probes.nil? and props.is_a? Azure::ARM::Expression
            @parent.number_of_probes = props
          end
          @parent.number_of_probes
        end
        def create(init=nil,&block)
          @parent = ProbeProperties.new nil, init
          self.instance_exec(@parent,&block) if block
          @parent
        end
      end
      def configure(&block)
        conf = Configurator.new
        conf.parent = self
        conf.instance_exec(self,&block) if block
        self
      end
    end
end
